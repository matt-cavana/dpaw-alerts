@model dpaw_alerts.Models.Subscriber

@{
    ViewBag.Title = "Create";
}

<div id="breadcrumb">
    <ul class="breadcrumb">
        <li><i class="fa fa-home"></i><a href="~/Home"> Home</a></li>
        <li><a href="~/Subsribers">Subscribers</a></li>
        <li class="active">New subscriber</li>
    </ul>
</div><!-- /breadcrumb-->
<div class="main-header clearfix">
    <div class="page-title">
        <h3 class="no-margin">New Subscriber</h3>
        <p>You can create a new subscriber in this section.</p>
    </div><!-- /page-title -->

</div><!-- /main-header -->


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row padding-md">
        <div class="col-md-6">

            <div class="form-horizontal">
              
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control", @maxlength = "9" } })
                        @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SubscriptionType, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.DropDownListFor(model => model.SubscriptionType, new SelectList(
                  new List<Object>{
                      new { value = "" , text = "Select one"  },
                       new { value = "Email" , text = "Email"  },
                       new { value = "SMS" , text = "SMS" },
                       new { value="Email and SMS", text ="Email-SMS"},
                       new { value="None", text ="None"}

                    },
                  "value",
                  "text"
                 ), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SubscriptionType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SubscriptionDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.SubscriptionDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SubscriptionDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-6">
                        
                        @Html.DropDownListFor(model => model.Status, new SelectList(
                  new List<Object>{
                       new { value = "Active" , text = "Active"  },
                       new { value = "Inactive" , text = "Inactive" }

                    },
                  "value",
                  "text"
                   ), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                       @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-primary" }) <input type="submit" value="Create" class="btn btn-info" />
                    </div>
                </div>
            </div>

        </div>
    </div>
}



@section Scripts {
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/date")
@Styles.Render("~/Content/css/form")

    <script>
        $(function () {

            //fix jquery date validation issue
            $.validator.methods.date = function (value, element) {
                return this.optional(element) || $.datetimepicker.parsedate('dd/mm/yy', value);
            }

            $.datetimepicker.setDateFormatter({
                parseDate: function (date, format) {
                    var d = moment(date, format);
                    return d.isValid() ? d.toDate() : false;
                },

                formatDate: function (date, format) {
                    return moment(date).format(format);
                }
            });

            $('#SubscriptionDate').datetimepicker({
                format: 'DD/MM/YYYY',
                timepicker: false,
                formatDate: 'DD/MM/YYYY',
                minDate: '-1970/01/02'
            });
        });
    </script>
}
